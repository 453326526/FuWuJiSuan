# 理解 goroutine 的并发

	要理解什么是goroutine，我们先来看看进程、线程以及协程它们之间的区别，这能帮助我们更好的理解goroutine。
	进程：分配完整独立的地址空间，拥有自己独立的堆和栈，既不共享堆，亦不共享栈，进程的切换只发生在内核态，由操作系统调度。 
	线程：和其它本进程的线程共享地址空间，拥有自己独立的栈和共享的堆，共享堆，不共享栈，线程的切换一般也由操作系统调度(标准线程是的)。 
	协程：和线程类似，共享堆，不共享栈，协程的切换一般由程序员在代码中显式控制。

	比较同步和异步中的性能。 通过模拟实现相关功能

## 实验截图

#### time ./main -n
![](https://github.com/453326526/FuWuJiSuan/blob/master/hw9/photos/jietu2.png)
#### 异步方法需要0.735秒。

#### time ./main 
![](https://github.com/453326526/FuWuJiSuan/blob/master/hw9/photos/jietu3.png)
#### 同步方法将花费大约5.418s

## 总结
	所以我们可以很容易得出结论：异步方法比同步方法更有效。
	goroutine 是比较难且实用的话题，需要在理解 goroutine 原理的基础上，进一步了解多线程程序的准则以及消息驱动的编程模式。